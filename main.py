import json
import http.client
from threading import Thread
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.spinner import Spinner
from kivy.uix.label import Label
from kivy.clock import Clock
from kivy.uix.popup import Popup
from kivy.metrics import dp
from kivy.core.window import Window

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
Window.size = (400, 600)

class TranslatorApp(App):
    def __init__(self):
        super().__init__()
        self.translation_result = ""
        self.translation_error = ""
        
    def build(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(15))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Label(
            text='üåç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
            size_hint_y=None,
            height=dp(40),
            font_size=dp(18),
            color=(0.2, 0.2, 0.2, 1)
        )
        main_layout.add_widget(title)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
        lang_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40), spacing=dp(5))
        
        # –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        source_label = Label(text='–ò–∑:', size_hint_x=None, width=dp(30), font_size=dp(12))
        self.source_spinner = Spinner(
            text='–ê–≤—Ç–æ',
            values=['–ê–≤—Ç–æ', '–†—É—Å—Å–∫–∏–π', 'English', 'Espa√±ol', 'Fran√ßais', 'Deutsch', 'Italiano', 'Portugu√™s', '‰∏≠Êñá', 'Êó•Êú¨Ë™û', 'ÌïúÍµ≠Ïñ¥', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', 'T√ºrk√ße'],
            size_hint_x=0.4,
            font_size=dp(11)
        )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–æ–≤
        swap_btn = Button(
            text='‚áÑ',
            size_hint_x=None,
            width=dp(40),
            font_size=dp(16)
        )
        swap_btn.bind(on_press=self.swap_languages)
        
        # –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
        target_label = Label(text='–í:', size_hint_x=None, width=dp(20), font_size=dp(12))
        self.target_spinner = Spinner(
            text='–†—É—Å—Å–∫–∏–π',
            values=['–†—É—Å—Å–∫–∏–π', 'English', 'Espa√±ol', 'Fran√ßais', 'Deutsch', 'Italiano', 'Portugu√™s', '‰∏≠Êñá', 'Êó•Êú¨Ë™û', 'ÌïúÍµ≠Ïñ¥', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', 'T√ºrk√ße'],
            size_hint_x=0.4,
            font_size=dp(11)
        )
        
        lang_layout.add_widget(source_label)
        lang_layout.add_widget(self.source_spinner)
        lang_layout.add_widget(swap_btn)
        lang_layout.add_widget(target_label)
        lang_layout.add_widget(self.target_spinner)
        
        main_layout.add_widget(lang_layout)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_label = Label(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:', size_hint_y=None, height=dp(25), font_size=dp(12), halign='left')
        input_label.bind(size=input_label.setter('text_size'))
        main_layout.add_widget(input_label)
        
        self.input_text = TextInput(
            multiline=True,
            hint_text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞...',
            size_hint_y=None,
            height=dp(120),
            font_size=dp(14)
        )
        main_layout.add_widget(self.input_text)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40), spacing=dp(10))
        
        self.translate_btn = Button(
            text='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
            font_size=dp(14),
            background_color=(0.29, 0.56, 0.89, 1)
        )
        self.translate_btn.bind(on_press=self.translate_text)
        
        clear_btn = Button(
            text='–û—á–∏—Å—Ç–∏—Ç—å',
            font_size=dp(14),
            background_color=(0.8, 0.8, 0.8, 1)
        )
        clear_btn.bind(on_press=self.clear_text)
        
        button_layout.add_widget(self.translate_btn)
        button_layout.add_widget(clear_btn)
        main_layout.add_widget(button_layout)
        
        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output_label = Label(text='–ü–µ—Ä–µ–≤–æ–¥:', size_hint_y=None, height=dp(25), font_size=dp(12), halign='left')
        output_label.bind(size=output_label.setter('text_size'))
        main_layout.add_widget(output_label)
        
        self.output_text = TextInput(
            multiline=True,
            readonly=True,
            hint_text='–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥...',
            size_hint_y=None,
            height=dp(120),
            font_size=dp(14),
            background_color=(0.95, 0.95, 0.95, 1)
        )
        main_layout.add_widget(self.output_text)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text='–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–≤–æ–¥—É',
            size_hint_y=None,
            height=dp(25),
            font_size=dp(10),
            color=(0.5, 0.5, 0.5, 1)
        )
        main_layout.add_widget(self.status_label)
        
        return main_layout
    
    def get_lang_code(self, lang_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —è–∑—ã–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        lang_map = {
            '–ê–≤—Ç–æ': 'auto',
            '–†—É—Å—Å–∫–∏–π': 'ru',
            'English': 'en',
            'Espa√±ol': 'es',
            'Fran√ßais': 'fr',
            'Deutsch': 'de',
            'Italiano': 'it',
            'Portugu√™s': 'pt',
            '‰∏≠Êñá': 'zh',
            'Êó•Êú¨Ë™û': 'ja',
            'ÌïúÍµ≠Ïñ¥': 'ko',
            'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©': 'ar',
            '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä': 'hi',
            'T√ºrk√ße': 'tr'
        }
        return lang_map.get(lang_name, 'auto')
    
    def swap_languages(self, instance):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏"""
        if self.source_spinner.text == '–ê–≤—Ç–æ':
            self.show_popup('–û—à–∏–±–∫–∞', '–ù–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —Å –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º')
            return
        
        source_text = self.source_spinner.text
        target_text = self.target_spinner.text
        
        # –ú–µ–Ω—è–µ–º —è–∑—ã–∫–∏
        if source_text in self.target_spinner.values:
            self.target_spinner.text = source_text
        if target_text in self.source_spinner.values:
            self.source_spinner.text = target_text
        
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã
        input_text = self.input_text.text
        output_text = self.output_text.text
        
        if output_text and output_text.strip():
            self.input_text.text = output_text
            self.output_text.text = input_text
    
    def translate_text(self, instance):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        text = self.input_text.text.strip()
        if not text:
            self.show_popup('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
            return
        
        source_lang = self.get_lang_code(self.source_spinner.text)
        target_lang = self.get_lang_code(self.target_spinner.text)
        
        if source_lang == target_lang and source_lang != 'auto':
            self.show_popup('–û—à–∏–±–∫–∞', '–ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è')
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.translate_btn.text = '–ü–µ—Ä–µ–≤–æ–¥–∏–º...'
        self.translate_btn.disabled = True
        self.status_label.text = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥...'
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = Thread(target=self.do_translation, args=(text, source_lang, target_lang))
        thread.daemon = True
        thread.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
        Clock.schedule_interval(self.check_translation_result, 0.1)
    
    def do_translation(self, text, source_lang, target_lang):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            conn = http.client.HTTPSConnection("deep-translate1.p.rapidapi.com")
            payload = json.dumps({
                "q": text,
                "source": source_lang,
                "target": target_lang
            })
            headers = {
                'x-rapidapi-key': "db66b9db65msh1e925d637b4e831p18d7f5jsn790bb6ed72b2",
                'x-rapidapi-host': "deep-translate1.p.rapidapi.com",
                'Content-Type': "application/json"
            }
            
            conn.request("POST", "/language/translate/v2", payload, headers)
            res = conn.getresponse()
            data = res.read()
            
            response = json.loads(data.decode("utf-8"))
            
            if 'data' in response and 'translations' in response['data']:
                translations = response['data']['translations']
                
                if 'translatedText' in translations:
                    translated_text = translations['translatedText']
                    if isinstance(translated_text, list) and len(translated_text) > 0:
                        translated_text = translated_text[0]
                    elif not isinstance(translated_text, str):
                        translated_text = str(translated_text)
                    
                    self.translation_result = translated_text
                else:
                    self.translation_error = "–ü–æ–ª–µ 'translatedText' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ"
            else:
                self.translation_error = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {response}"
                
        except Exception as e:
            self.translation_error = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"
    
    def check_translation_result(self, dt):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        if self.translation_result:
            self.output_text.text = self.translation_result
            self.status_label.text = '–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω'
            self.translation_result = ""
            self.restore_translate_button()
            return False
        
        if self.translation_error:
            self.show_popup('–û—à–∏–±–∫–∞', self.translation_error)
            self.translation_error = ""
            self.restore_translate_button()
            return False
        
        return True
    
    def restore_translate_button(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        self.translate_btn.text = '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏'
        self.translate_btn.disabled = False
    
    def clear_text(self, instance):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π"""
        self.input_text.text = ''
        self.output_text.text = ''
        self.status_label.text = '–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã'
    
    def show_popup(self, title, message):
        """–ü–æ–∫–∞–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞"""
        popup = Popup(
            title=title,
            content=Label(text=message),
            size_hint=(0.8, 0.3)
        )
        popup.open()

if __name__ == '__main__':
    TranslatorApp().run()
